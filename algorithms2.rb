#1 The sum of the squares of the first ten natural numbers is 1^2 + 2^2 + ... + 10^2 = 385.
# The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)^2 = 55^2 = 3025.
# Hence the (absolute value of the) difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

# First implementation (the long way)

def sum_square_diff(upper = 100)
  sum_of_squares = (1..upper).map { |num| num ** 2}.sum
  square_of_sum = (1..upper).sum ** 2
  (sum_of_squares - square_of_sum).abs  # return the absolute value of the difference
end

p sum_square_diff  # => 25164150
p sum_square_diff(100)  # => 25164150
p sum_square_diff(10)  # => 2640

# Second implementation (using formulae - much faster)

def sum_square_diff2(upper = 100)
  sum_of_squares = (upper * (upper + 1) * ((2 * upper) + 1)) / 6
  square_of_sum = ((upper * (upper + 1)) / 2) ** 2
  (sum_of_squares - square_of_sum).abs  # return the absolute value of the difference
end

p sum_square_diff2  # => 25164150
p sum_square_diff2(100)  # => 25164150
p sum_square_diff2(10)  # => 2640

#2 By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10,001st prime number?

require "prime"
require "benchmark"

p Prime.first(10001).last  # => 104743
p Benchmark.measure { Prime.first(10001).last }  # .0016 seconds

# OR

p Prime.take(10001).last  # => 104743
p Benchmark.measure { Prime.take(10001).last }  # .0016 seconds

#3 The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.

def sum_primes_below(upper)
  (1...upper).select { |num| Prime.prime?(num) }.sum  # exclude upper, as we want primes below upper
end

p sum_primes_below(200000)  # => 1709600813
p Benchmark.measure { sum_primes_below(200000) }  # .72 seconds
# p sum_primes_below(2000000)  # => 142913828922
# p Benchmark.measure { sum_primes_below(2000000) }  # nearly 15 seconds!

# Prime.each works MUCH faster:

p Prime.each(200000).sum  # => 1709600813
p Benchmark.measure { Prime.each(200000).sum}  # .0036 seconds(!)
p Prime.each(2000000).sum  # => 142913828922
p Benchmark.measure { Prime.each(2000000).sum}  # .032 seconds(!)

# ~~~
# SCRATCH

# p (1..100000000).reduce(:+)  # => 5000000050000000
# p Benchmark.measure { (1..100000000).reduce(:+) }  # 3.37 seconds
p (1..100000000).sum  # => 5000000050000000
p Benchmark.measure { (1..100000000).sum }  # 1.2e-5 seconds(!!!)  HUGE difference.  I'm guessing .sum is using n * (n + 1) / 2

p (1..1000).reduce(:*)  # => 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
p Benchmark.measure { (1..1000).reduce(:*) } # .0005 seconds

p (1..1000).count { |num| Prime.prime?(num) }  # => 168

p (1..100).select { |n| n.even? }.sum  # => 2550
